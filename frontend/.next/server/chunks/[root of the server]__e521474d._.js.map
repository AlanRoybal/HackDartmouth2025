{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Projects/HackDartmouth2025/frontend/src/app/api/history/route.js"],"sourcesContent":["// app/api/history/route.js\r\nimport { NextResponse } from \"next/server\";\r\nimport { S3Client, ListObjectsV2Command } from \"@aws-sdk/client-s3\";\r\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\r\nimport { GetObjectCommand } from \"@aws-sdk/client-s3\";\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// Initialize S3 client\r\nconst s3Client = new S3Client({\r\n  region: process.env.AWS_REGION,\r\n  credentials: {\r\n    accessKeyId: process.env.AWS_ACCESS_KEY,\r\n    secretAccessKey: process.env.AWS_SECRET_KEY,\r\n  },\r\n});\r\n\r\n// Initialize Gemini\r\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);\r\n\r\n// Helper function to get a summary using Gemini\r\nasync function generateSummaryWithGemini(jsonData) {\r\n  try {\r\n    // Get the Gemini model\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\r\n\r\n    // Create a prompt for Gemini to summarize the JSON data\r\n    const prompt = `\r\n    Generate a concise summary (maximum 2-3 sentences) of the following data:\r\n    ${JSON.stringify(jsonData, null, 2)}\r\n    \r\n    Focus on the most important aspects only. Don't mention that this is from a JSON file.\r\n    `;\r\n\r\n    // Generate the summary\r\n    const result = await model.generateContent(prompt);\r\n    const response = await result.response;\r\n    const summary = response.text().trim();\r\n\r\n    return summary;\r\n  } catch (error) {\r\n    console.error(\"Error generating summary with Gemini:\", error);\r\n    return \"Unable to generate summary.\";\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    // List all directories inside the 'saved' folder\r\n    const listFoldersCommand = new ListObjectsV2Command({\r\n      Bucket: process.env.S3_BUCKET_NAME,\r\n      Prefix: \"saved/\",\r\n      Delimiter: \"/\",\r\n    });\r\n\r\n    const foldersResponse = await s3Client.send(listFoldersCommand);\r\n\r\n    // Extract folder names (CommonPrefixes includes the folders)\r\n    const folders =\r\n      foldersResponse.CommonPrefixes?.map((prefix) => prefix.Prefix) || [];\r\n\r\n    // For each folder, get the image and JSON files\r\n    const historyItems = await Promise.all(\r\n      folders.map(async (folderPrefix) => {\r\n        // List all objects in this folder\r\n        const listObjectsCommand = new ListObjectsV2Command({\r\n          Bucket: process.env.S3_BUCKET_NAME,\r\n          Prefix: folderPrefix,\r\n        });\r\n\r\n        const objectsResponse = await s3Client.send(listObjectsCommand);\r\n\r\n        // Find image and JSON files\r\n        let imageKey = null;\r\n        let jsonKey = null;\r\n\r\n        objectsResponse.Contents?.forEach((item) => {\r\n          const key = item.Key;\r\n          if (\r\n            key.endsWith(\".jpg\") ||\r\n            key.endsWith(\".png\") ||\r\n            key.endsWith(\".jpeg\")\r\n          ) {\r\n            imageKey = key;\r\n          } else if (key.endsWith(\".json\")) {\r\n            jsonKey = key;\r\n          }\r\n        });\r\n\r\n        if (!imageKey || !jsonKey) {\r\n          return null; // Skip folders without both image and JSON\r\n        }\r\n\r\n        // Get signed URL for the image (valid for 1 hour)\r\n        const getImageCommand = new GetObjectCommand({\r\n          Bucket: process.env.S3_BUCKET_NAME,\r\n          Key: imageKey,\r\n        });\r\n\r\n        const imageUrl = await getSignedUrl(s3Client, getImageCommand, {\r\n          expiresIn: 3600,\r\n        });\r\n\r\n        // Get the JSON content\r\n        const getJsonCommand = new GetObjectCommand({\r\n          Bucket: process.env.S3_BUCKET_NAME,\r\n          Key: jsonKey,\r\n        });\r\n\r\n        const jsonResponse = await s3Client.send(getJsonCommand);\r\n        const jsonContent = await jsonResponse.Body.transformToString();\r\n        const jsonData = JSON.parse(jsonContent);\r\n\r\n        // Generate a summary of the JSON data using Gemini\r\n        const aiSummary = await generateSummaryWithGemini(jsonData);\r\n\r\n        // Combine original JSON with the AI-generated summary\r\n        const enrichedData = {\r\n          ...jsonData,\r\n          aiSummary,\r\n        };\r\n\r\n        return {\r\n          imageUrl,\r\n          summary: enrichedData,\r\n          folderPath: folderPrefix,\r\n        };\r\n      })\r\n    );\r\n\r\n    // Filter out any null results and sort by timestamp (newest first)\r\n    const validItems = historyItems\r\n      .filter((item) => item !== null)\r\n      .sort((a, b) => {\r\n        const timestampA = new Date(a.summary.timestamp || 0).getTime();\r\n        const timestampB = new Date(b.summary.timestamp || 0).getTime();\r\n        return timestampB - timestampA;\r\n      });\r\n\r\n    return NextResponse.json({ items: validItems });\r\n  } catch (error) {\r\n    console.error(\"Error fetching history from S3:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch history items\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}